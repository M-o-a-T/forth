#!/usr/bin/python3
# EASY-INSTALL-ENTRY-SCRIPT: 'pyserial==3.5b0','console_scripts','pyserial-miniterm'
import sys
from functools import partial
import traceback

import click
import trio

from mf.term import Terminal, Errors


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# default args can be used to override when calling main() from an other script
# e.g to create a miniterm-my-device.py
@click.command()
@click.option("-e", "--echo", is_flag=True, help="enable local echo (default off)")
@click.option("-f", "--filter", type=str, multiple=True, help="add text transformation, default none")
@click.option("--eol", type=click.Choice(['CR', 'LF', 'CRLF'], case_sensitive=False), help="end of line mode", default="LF")
@click.option("-q", "--quiet", is_flag=True, help="suppress non-error messages")
@click.option("-v", "--verbose", is_flag=True, help="be more chatty")
@click.option("-B", "--bold", is_flag=True, help="print Forth output in boldface")
@click.option("-r", "--reset", is_flag=True, help="Send reset sequence")
@click.option("-R", "--inv-reset", is_flag=True, help="Is the reset wire inverted?")
@click.option("-x", "--exec", type=click.Path(), multiple=True, help="send this file to the MCU")
@click.option("-F", "--flag", type=str, multiple=True, help="set this flag")
@click.option("-l", "--log", type=click.Path(), help="log to this file")
@click.option("-b", "--batch", is_flag=True, help="don't start a console")
@click.option("-D", "--develop", is_flag=True, help="show Python traceback on error")
@click.option("-c", "--command", is_flag=True, help="run a program instead of conneecting to a port")
@click.option("-g", "--go-ahead", help="Continuation signal", default="ok.")
@click.option("-a", "--ack", type=int, help="ASCII code for OK (default 4: ^D)", default=4)
@click.option("-A", "--nak", type=int, help="ASCII code for error (default 3: ^C)", default=3)
@click.option("-t", "--timeout", type=float, help="timeout for go-ahead and ack", default=0.2)
@click.argument("port", nargs=-1)
def cmd(**kw):
    """Command line tool, entry point"""
    main_ = partial(main,**kw)
    verbose = kw.get("verbose",0)
    quiet = kw.pop("quiet",0)
    verbose = 1+verbose-quiet
    exc = None

    if kw.get("batch"):
        run = trio.run
    else:
        import gi

        gi.require_version("Gtk", "3.0")

        from gi.repository import GLib
        from gi.repository import Gtk
        from outcome import Error

        def run(trio_main):
            """Run Trio and PyGTK together."""
            def done_callback(outcome):
                if isinstance(outcome, Error):
                    nonlocal exc
                    exc = outcome.error
                    #show_error(exc, verbose)
                    #traceback.print_exception(type(exc), exc, exc.__traceback__)
                    Gtk.main_quit()
                Gtk.main_quit()

            def glib_schedule(function):
                GLib.idle_add(function)

            trio.lowlevel.start_guest_run(
                trio_main,
                run_sync_soon_threadsafe=glib_schedule,
                done_callback=done_callback,
                host_uses_signal_set_wakeup_fd=True,
            )
            Gtk.main()

    try:
        run(main_)
    finally:
        if exc is not None:
            raise exc from None


async def main(**kw):
    port = kw.get("port")
    command = kw.get("command")
    batch = kw.get("batch")
    develop = kw.get("develop")
    filter = kw.get("filter")
    exec = kw.get("exec")
    verbose = kw.get("verbose",0)
    quiet = kw.pop("quiet",0)
    verbose = 1+verbose-quiet
    kw["verbose"] = verbose

    if command:
        if kw.get("reset") or kw.get("inv_reset"):
            raise click.UsageError("You can't reset a command.")
        if not len(port):
            raise click.UsageError("Which port (and baud rate, if not 115200)?")
    else:
        if not len(port):
            raise click.UsageError("Which command (and arguments) should I run?")
        elif len(port) > 2:
            raise click.UsageError("Too many arguments.")

    if batch and develop:
        raise click.UsageError("Batch and development mode don't like each other.")
    if not develop and not exec:
        kw["develop"] = True

    if filter:
        if "help" in filter:
            print('Available filters:', file=sys.stderr)
            print('\n'.join(
                '{:<10} = {.__doc__}'.format(k, v)
                for k, v in sorted(TRANSFORMATIONS.items())), file=sys.stderr)
            sys.exit(1)
    else:
        kw["filter"] = ['direct']
    if kw.get("eol"):
        kw["eol"] = kw["eol"].lower()

    try:
        term = Terminal(**kw)
        await term.run()
    except BaseException as exc:
        show_error(exc, verbose)

def show_error(exc, verbose):
    if isinstance(exc, KeyboardInterrupt):
        if verbose or not batch:
            print('\n--- exit ---\n',file=sys.stderr)
        sys.exit(1)
    elif isinstance(exc, click.ClickException):
        raise
    elif isinstance(exc, Errors):
        print(f"\nError: {exc !r}", file=sys.stderr)
        sys.exit(1)
    else:
        #traceback.print_exception(type(exc), exc, exc.__traceback__)
        raise

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if __name__ == '__main__':
    cmd()
